#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"

#include "../zmk-nodefree-config/helper.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define UPR 1
#define LOW 2

#define XXX &none
#define ___ &trans

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   " 

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2

/ {
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
            label = "Base";
            bindings = <
&kp TAB     &kp Q  &kp W  &kp E     &kp R  &kp T            &kp Y      &kp U  &kp I      &kp O    &kp P     &trans
&kp ESCAPE  &hml LCTRL A  &hml LALT S  &hml LGUI D     &kp F  &kp G            &kp H      &kp J  &kp K      &kp L    &kp SEMI  &kp ENTER
&kp LSHFT   &kp Z  &kp X  &kp C     &kp V  &kp B            &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_CONTROL
                          &kp LGUI  &mo 1  &kp BACKSPACE    &kp SPACE  &mo 2  &kp RALT
            >;
        };
        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |
            label = "Raise";
            bindings = <
&kp TILDE         &kp N1        &kp N2        &kp N3    &kp N4       &kp N5             &kp N6    &kp N7         &kp N8         &kp N9        &kp N0         &kp PIPE
&kp SINGLE_QUOTE  &kp EXCL      &kp AT_SIGN   &kp HASH  &kp DOLLAR   &kp LEFT_BRACE     &kp LBKT  &kp UNDER      &kp LS(STAR)   &kp LS(LPAR)  &kp LS(RPAR)   &kp DOUBLE_QUOTES
&kp LSHFT         &kp KP_EQUAL  &kp KP_MINUS  &kp PLUS  &kp PERCENT  &kp RIGHT_BRACE    &kp RBKT  &kp LS(CARET)  &kp AMPERSAND  &trans        &kp BACKSLASH  &kp TILDE
                                              &kp LGUI  &trans       &trans             &trans    &trans         &kp RALT
            >;
        };
        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |
            label = "Lower";
            bindings = <
&kp TAB         &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                  &kp F6      &kp F7             &kp F8           &kp F9     &kp F10  &kp RC(LG(Q))
&kp CAPS        &trans        &kp LG(C)     &kp LG(V)     &trans        &kp RG(RS(NUMBER_5))    &kp LEFT    &kp DOWN           &kp UP           &kp RIGHT  &trans   &kp F11
&kp LEFT_SHIFT  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4            &kp K_MUTE  &kp K_VOLUME_DOWN  &kp K_VOLUME_UP  &trans     &trans   &kp F12
                                            &kp LGUI      &trans        &trans                  &trans      &trans             &kp RALT
            >;
        };
        layer_3 {
            bindings = <
&trans      &trans  &trans  &kp LA(LC(E))  &trans  &trans           &trans                  &trans            &trans                &trans             &trans  &trans
&bt BT_CLR  &trans  &trans  &trans         &trans  &kp LA(LC(G))    &kp LA(LC(LEFT_ARROW))  &kp LA(LC(DOWN))  &kp LA(LC(UP_ARROW))  &kp LA(LC(RIGHT))  &trans  &kp LA(LC(ENTER))
&trans      &trans  &trans  &trans         &trans  &trans           &trans                  &trans            &trans                &trans             &trans  &trans
                            &trans         &trans  &trans           &trans                  &trans            &trans
            >;
        };
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        SuperLayer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};